from PIL import Image, ImageDraw, ImageFont
import random
import requests
import tempfile
import os

# Function to create a diagonal gradient background
def create_gradient(width, height, color1, color2):
    gradient = Image.new("RGBA", (width, height))
    draw = ImageDraw.Draw(gradient)

    for x in range(width):
        r = int(color1[0] * (1 - x / width) + color2[0] * (x / width))
        g = int(color1[1] * (1 - x / width) + color2[1] * (x / width))
        b = int(color1[2] * (1 - x / width) + color2[2] * (x / width))
        draw.line((x, 0, x, height), fill=(r, g, b))

    return gradient

# Fetch quote from the API
def get_random_quote():
    response = requests.get("https://type.fit/api/quotes")
    if response.status_code == 200:
        data = response.json()
        random_quote = random.choice(data)
        return random_quote["text"], random_quote["author"]
    else:
        return None, None

# Set up the background image
background_width = 800
background_height = 600
gradient_top_color = (0, 0, 0)    # Black
gradient_bottom_color = (0, 0, 255)  # Blue

background = create_gradient(background_width, background_height, gradient_top_color, gradient_bottom_color)

# Get a random quote and author
quote_text, author = get_random_quote()

if quote_text and author:
    # Load font and size
    big_font_size = 28  # Adjust font size as needed
    big_gothic_font = ImageFont.truetype("arialbd.ttf", big_font_size)  # Bold Gothic font

    draw = ImageDraw.Draw(background)

    # Get text bounding box for quote
    quote_bbox = draw.textbbox((0, 0), quote_text, font=big_gothic_font)

    # Calculate text position for centering quote
    quote_x = (background_width - (quote_bbox[2] - quote_bbox[0])) // 2
    quote_y = (background_height - (quote_bbox[3] - quote_bbox[1])) // 2

    # Draw the quote text
    draw.text((quote_x, quote_y), quote_text, font=big_gothic_font, fill=(255, 255, 255))  # White text color

    # Load small font for author
    small_font_size = 16  # Adjust font size as needed
    small_font = ImageFont.truetype("GOTHIC.TTF", small_font_size)

    # Get text bounding box for author
    author_bbox = draw.textbbox((0, 0), f"- {author}", font=small_font)

    # Calculate text position for author below the quote
    author_x = (background_width - (author_bbox[2] - author_bbox[0])) // 2
    author_y = quote_y + (quote_bbox[3] - quote_bbox[1]) + 10  # Add a small gap
    author = author.replace("type.fit", "generated by Q-bot")
    
    # Draw the author text
    draw.text((author_x, author_y), f"- {author}", font=small_font, fill=(255, 255, 255))  # White text color

    # Save the composed image to a temporary file
    temp_image_path = os.path.join(tempfile.gettempdir(), "composed_image.png")
    background.save(temp_image_path)

    # Open the image
    background.show()

else:
    print("Failed to fetch a quote.")
